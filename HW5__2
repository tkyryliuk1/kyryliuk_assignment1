# 1. Implement the heapify_up function
# 2. Implement the heapify_down function
# 3. Implement the heapsort function


import random


def random_array(size, lower_bound=-1000, upper_bound=1000):
    return [random.randint(lower_bound, upper_bound) for _ in range(size)]


class MinHeap:
    def __init__(self):
        # We will use a list to store the heap instead of a tree, since our heap is a complete binary tree
        self.heap = []

    def insert(self, value):
        # Insert the value at the end of the heap
        self.heap.append(value)
        # And now we need to heapify that value up to its correct position
        self._heapify_up(len(self.heap) - 1)

    def get_min(self):
        if len(self.heap) == 0:
            return None
        return self.heap[0]

    def extract_min(self):
        if len(self.heap) == 0:
            return None
        if len(self.heap) == 1:
            return self.heap.pop()
        min_val = self.heap[0]
        self.heap[0] = self.heap.pop()
        self._heapify_down(0)
        return min_val

    def _get_parent(self, index):
        return (index - 1) // 2

    # Heapify up - move the value up to its correct position (used when inserting a new value)
    # TODO: Implement the heapify up function
    def _heapify_up(self, index):
        parent = self._get_parent(index)
        while index > 0 and self.heap[index] < self.heap[parent]:
            self.heap[index], self.heap[parent] = self.heap[parent], self.heap[index]
            index = parent
            parent = self._get_parent(index)

    def _get_left_child(self, index):
        return 2 * index + 1

    def _get_right_child(self, index):
        return 2 * index + 2

    # Heapify down - move the value down to its correct position (used when extracting the min)
    # TODO: Implement the heapify down function
    def _heapify_down(self, index):
        """
        Move the element at the given index down to maintain the heap property.
        """
        size = len(self.heap)
        while True:
            left = self._get_left_child(index)
            right = self._get_right_child(index)
            smallest = index
            if left < size and self.heap[left] < self.heap[smallest]:
                smallest = left
            if right < size and self.heap[right] < self.heap[smallest]:
                smallest = right
            if smallest == index:
                break
            self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index]

# TODO: Implement the heapsort function
def heapsort(arr):
    heap = MinHeap()
    for value in arr:
        heap.insert(value)
    sorted_arr = []
    while len(heap.heap) > 0:
        sorted_arr.append(heap.extract_min())
    return sorted_arr

def basic_test(sorting_func):
    arr = [5, 4, 3, 2, 1]
    arr_my = sorting_func(arr)
    res = sorted(arr)
    assert arr_my == res, f"Expected {res}, but my sort got {arr_my}"
    print("\033[92mBasic test passed\033[0m")


def random_test(sorting_func):
    arr = random_array(5)
    print("Random array: ", arr)
    arr_my = sorting_func(arr)
    print("Sorted array: ", arr_my)
    res = sorted(arr)
    assert arr_my == res, f"Expected {res}, but my sort got {arr_my}"
    print("\033[92mRandom test passed\033[0m")


def medium_test(sorting_func):
    arr = random_array(500)
    arr_my = sorting_func(arr)
    res = sorted(arr)
    assert arr_my == res, f"Expected {res}, but my sort got {arr_my}"
    print("\033[92mMedium test passed\033[0m")


def big_test(sorting_func):
    arr = random_array(10000)
    arr_copy = arr.copy()

    import time
    start = time.time()
    arr_my = sorting_func(arr)
    end = time.time()
    print(f"Time to sort 10,000 elements: {end - start:.6f} seconds")

    start = time.time()
    arr_copy.sort()
    end = time.time()
    print(f"Time to sort 10,000 elements with built-in sort: {end - start:.6f} seconds")

    assert arr_my == arr_copy, f"Expected {arr_copy}, but my sort got {arr_my}"
    print("\033[92mBig test passed\033[0m")


if __name__ == "__main__":
    sorting_func = heapsort
    basic_test(sorting_func)
    random_test(sorting_func)
    medium_test(sorting_func)
    big_test(sorting_func)


# questions:
# 1. No, HeapSort is not a stable sorting algorithm, because it doesn't guaranty keeping the relative order of elements (for example, elements with the same keys won't surely retain their relative order after sorting)
# 2. Space complexity is O(n) because an array is created for storing data
# 3. Time complexity is O(nlogn) for both sorted and unsorted arrays because the algorithm performs the same operations
