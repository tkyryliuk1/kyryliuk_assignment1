# Binary Search Tree (BST)

class BinarySearchTree:
    class Node:
        def __init__(self, value):
            self.data = value
            self.left = None
            self.right = None
    def __init__(self):
        self.root = None

    def _search(self, root, value):
        if root is None:
            return False
        if root.data == value:
            return True
        if value < root.data:
            return self._search(root.left, value)
        
        return self._search(root.right, value)
    
    
    def search(self, value):
        return self._search(self.root, value)



    def _insert(self, root, value):
        if root is None:
            return self.Node(value)
        if value < root.data:
            root.left = self._insert(root.left, value)
        elif value > root.data:
            root.right = self._insert(root.right, value)
        return root


    def insert(self, value):
        # if self.root is None:
        #     self.Node = BinaryTreeNode(value)
        #     return
        self.root = self._insert(self.root, value)

    def _remove(self, root, value):
        if root is None:
            return root
        if value < root.data:
            root.left = self._remove(root.left, value)
        elif value > root.data:
            root.right = self._remove(root.right, value)
        else:
            if root.left is None:
                return root.right
            if root.right is None:
                return root.left
            max_left = root.left
            while max_left.right:
                max_left = max_left.right
            root.data = max_left.data
            root.left = self._remove(root.left, max_left.data)
        return root

    def remove(self, value):
        self.root = self._remove(self.root, value)



bst = BinarySearchTree()
bst.insert(7)
bst.insert(3)
bst.insert(5)
bst.insert(1)
bst.insert(2)

print(bst.search(1))
print(bst.search(6))

bst.remove(1)
print(bst.search(1))
